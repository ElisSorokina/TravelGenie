import Foundation
import SwiftUI

@MainActor
class ChatViewModel: ObservableObject {

    // –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞ (–∏—Å—Ç–æ—Ä–∏—è)
    @Published var messages: [ChatMessageModel] = []

    // –¢–æ, —á—Ç–æ —é–∑–µ—Ä —Å–µ–π—á–∞—Å –Ω–∞–±–∏—Ä–∞–µ—Ç
    @Published var draft: String = ""

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–∏ "–º–æ–¥–µ–ª—å –¥—É–º–∞–µ—Ç..."
    @Published var isSending: Bool = false

    // –û—à–∏–±–∫–∞ (–µ—Å–ª–∏ API —É–ø–∞–ª–æ)
    @Published var errorText: String?

    // –ö–ª—é—á –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
    private let historyKey = "chatHistoryMessages_v1"

    init() {
        loadHistory()

        // –ï—Å–ª–∏ —á–∞—Ç–∞ –Ω–µ—Ç ‚Äî –¥–æ–±–∞–≤–∏–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        if messages.isEmpty {
            let welcome = ChatMessageModel(
                sender: .assistant,
                text: "–ü—Ä–∏–≤–µ—Ç üëã –Ø –ø–æ–º–æ–≥—É —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç–≤–æ—é –ø–æ–µ–∑–¥–∫—É: –±–∏–ª–µ—Ç—ã, –æ—Ç–µ–ª–∏, –º–∞—Ä—à—Ä—É—Ç –ø–æ –¥–Ω—è–º. –°–∫–∞–∂–∏, –æ—Ç–∫—É–¥–∞ —Ç—ã –ª–µ—Ç–∏—à—å –∏ –∫—É–¥–∞ —Ö–æ—á–µ—à—å?",
                timestamp: Date()
            )
            messages.append(welcome)
            saveHistory()
        }
    }

    // MARK: - –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—É—â–µ–π —Ä–µ–ø–ª–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    func sendCurrentDraft() {
        let userText = draft.trimmingCharacters(in: .whitespacesAndNewlines)
        guard !userText.isEmpty else { return }

        draft = ""
        errorText = nil

        // –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–µ–Ω—Ç—É
        let userMsg = ChatMessageModel(sender: .user, text: userText)
        messages.append(userMsg)
        saveHistory()

        // –ø—Ä–æ—Å–∏–º –æ—Ç–≤–µ—Ç —É –º–æ–¥–µ–ª–∏
        Task {
            await sendToOpenAI(userText: userText)
        }
    }

    // MARK: - –ó–∞–ø—Ä–æ—Å –∫ OpenAI
    private func sendToOpenAI(userText: String) async {
        isSending = true
        defer { isSending = false }

        do {
            // –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ ~10 —Å–æ–æ–±—â–µ–Ω–∏–π, —á—Ç–æ–±—ã –Ω–µ —Ä–∞–∑–¥—É–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
            let recent = Array(messages.suffix(10))

            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è Chat Completions API
            // ["role": "user"/"assistant", "content": "..."]
            let openAIMessages: [[String: String]] = recent.map { msg in
                [
                    "role": (msg.sender == .user ? "user" : "assistant"),
                    "content": msg.text
                ]
            }

            // –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è OpenAI
            let requestBody: [String: Any] = [
                "model": "gpt-4o-mini",
                "temperature": 0.7,
                "messages": openAIMessages
            ]

            let bodyData = try JSONSerialization.data(withJSONObject: requestBody)

            // –ì–æ—Ç–æ–≤–∏–º –∑–∞–ø—Ä–æ—Å
            var req = URLRequest(url: Secrets.openAIBaseURL.appendingPathComponent("chat/completions"))
            req.httpMethod = "POST"
            req.addValue("application/json", forHTTPHeaderField: "Content-Type")
            req.addValue("Bearer \(Secrets.openAIKey)", forHTTPHeaderField: "Authorization")
            req.httpBody = bodyData

            // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–µ—Ç–µ–≤–æ–π –∑–∞–ø—Ä–æ—Å
            let (respData, resp) = try await URLSession.shared.data(for: req)

            guard let http = resp as? HTTPURLResponse else {
                throw ChatError.network
            }

            guard (200..<300).contains(http.statusCode) else {
                let errText = String(data: respData, encoding: .utf8) ?? "Unknown OpenAI error"
                print("‚ùå OpenAI HTTP error:", errText)
                throw ChatError.badStatus(http.statusCode)
            }

            // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç OpenAI —Ñ–æ—Ä–º–∞—Ç–∞:
            // {
            //   "choices": [
            //     {
            //       "message": {
            //         "role": "assistant",
            //         "content": "–æ—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞"
            //       }
            //     }
            //   ]
            // }
            struct ChoiceMessage: Decodable {
                let role: String
                let content: String
            }
            struct Choice: Decodable {
                let message: ChoiceMessage
            }
            struct CompletionResponse: Decodable {
                let choices: [Choice]
            }

            let decoded = try JSONDecoder().decode(CompletionResponse.self, from: respData)

            guard
                let botText = decoded.choices.first?.message.content,
                !botText.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty
            else {
                throw ChatError.emptyResult
            }

            // –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            let botMsg = ChatMessageModel(sender: .assistant, text: botText)
            messages.append(botMsg)
            saveHistory()

        } catch {
            print("‚ùå Chat error:", error)
            errorText = "Sorry, I couldn't reply."
        }
    }

    // MARK: - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ
    private func saveHistory() {
        do {
            let data = try JSONEncoder().encode(messages)
            UserDefaults.standard.set(data, forKey: historyKey)
        } catch {
            print("‚ùå Failed to save chat history:", error)
        }
    }

    // MARK: - –∑–∞–≥—Ä—É–∑–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ
    private func loadHistory() {
        guard let data = UserDefaults.standard.data(forKey: historyKey) else { return }
        if let arr = try? JSONDecoder().decode([ChatMessageModel].self, from: data) {
            self.messages = arr
        }
    }
}

// –æ—à–∏–±–∫–∏ —á–∞—Ç–∞ (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ)
enum ChatError: Error {
    case network
    case badStatus(Int)
    case emptyResult
}
